/**
*   E-> Cadena vacia
*/

<script> ::= <declaracion_funcion> <script>
    |   <lista_sentencias> <script>
    |   E

<lista_sentencias> ::=  <sentencia> <lista_sentencias>
    |   E   

#SENTENCIAS
    <sentencia> ::= "{" <lista_sentencias> "}"
        |   <if>
        |   <loop>
        |   <declaracion>
        |   <return>
        |	<expresion>
        |   E

    <if> ::= <if_cerrado> | <if_abierto>

    <if_cerrado> ::= "if" "(" <expresion> ")" <sentencia> "else" <if_cerrado>

    <if_abierto> ::= "if" "(" <expresion> ")" <sentencia>
        |   "if" "(" <expresion> ")" <sentencia> "else" <if_abierto>

    <loop> ::= 
        |   "while" "(" <expresion> ")" <sentencia>
        |   "for" "(" <for_expresion> ";" <for_expresion> ";" <for_expresion> ")" <sentencia>

    <for_expresion> ::= <declaracion> | <expresion> | E

    <return> ::= “return” <expresion>

    <declaracion> ::= <tipo> <identificador> <cola_declaraciones> 
    	| <tipo> <asignacion> <cola_declaraciones>

    <cola_declaraciones> ::= 	"," <asignacion> <cola_declaraciones> 
    	| "," <identificador> <cola_declaraciones>
        |   E

    <asignacion> ::= <identificador>"=" <expresion>
    	|	<identificador> "=" <valor>
        |   E

#EXPRESIONES
    <expresion> ::= 
        |   <expresion_aritmetica>
        |   <termino> <expresion1>
        |   "(" <expresion> ")"
        |	<asignacion>

    <expresion1> ::=  <operador> <termino> | E

    <termino> ::= <expresion> | <identificador>

#EXPRESION ARITMETICA   
    <expresion_aritmetica> ::= <termino_aritmetico> <expresion_aritmetica1>

    <expresion_aritmetica1> ::= "+" <termino_aritmetico> <expresion_aritmetica1> | "-" <termino_aritmetico> <expresion_aritmetica1>  | E

    <termino_aritmetico> ::= <factor> <termino1>

    <termino1> ::= "*" <factor> <termino1> | "/" <factor> <termino1> | E

    <factor> ::= "(" <expresion> ")" | <id>

    <operador> ::= <operador_logico> 
        | <operador_relacional>
        | <operador_asignacion>

    <operador_asignacion> ::= "+=" | "-=" | "*=" | "/=" | ".=" | "^="

    <operador_logico> ::= "||" | "&&" | "or" | "and" | "xor" | "|" | "&" 

    <operador_relacional> ::= "==" | "!=" | "<" | ">" | "<=" | ">="   

    <tipo> ::= "int"
        | "double"
        | "float"
        | "boolean"
        | "string"


#FUNCIONES
    <declaracion_funcion> ::= "function" <identificador> "(" <parametros_funcion> ")" "{" <lista_sentencias> "}"

    <parametros_funcion> ::= <declaracion_parametros> | E    

    <declaracion_parametros> ::= <tipo> <id> <cola_parametros>

    <cola_parametros> ::= "," <declaracion_parametros>
        |   E

    <llamada_funcion> ::= <identificador> "(" <lista_parametros> ")"

    <lista_parametros> ::= <expresion> <lista_parametros_cola>
    	|	E

    <lista_parametros_cola> ::= ","<lista_parametros> | E

#VALORES 
	<valor> := <NU> | <ST> | <BOOL>

    <NU> ::= [ 0-9 ]+[.(0-9)+]?

    <ST> ::= "\"" [A-Z|a-z|0-9|SY|OP]* "\""

    <BOOL> ::= true | false

#####################NOTAS###############
	<programa> ::= <proposicion_compuesta>

	<proposicion_compuesta> ::= begin <proposiciones_optativas> end

	<proposiciones_optativas> ::= <lista_proposiciones> | E

	<lista_proposiciones> ::= <proposicion> | <lista_proposiciones> ; <proposicion>

	<proposicion> ::= <asignacion>
		|	<decision>
		|	<ciclo>

	#Eliminacion de recursividad
	<lista_proposiciones> ::= <proposicion> <lista_proposiciones1>
	<lista_proposiciones1> ::= ; <proposicion> <lista_proposiciones1>
		A-> (alpha) B (beta)