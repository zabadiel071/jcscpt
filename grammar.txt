SCRIPT -> DECLARE_FUNCTION SCRIPT' | STATEMENT SCRIPT' | E
SCRIPT' -> DECLARE_FUNCTION SCRIPT' | STATEMENT SCRIPT' | E

STATEMENT -> ASSIGNMENT | DECLARATION | ++ id | -- id | LOOP | IF | RETURN | FOR | FUNCTION_CALL

DECLARATION -> int ASSIGNMENT DECLARATION' | float ASSIGNMENT DECLARATION' | boolean ASSIGNMENT DECLARATION' | string ASSIGNMENT DECLARATION'
DECLARATION' -> , ASSIGNMENT    DECLARATION' | E

LOOP -> while ( ASSIGNMENT_EXPR )  { STATEMENT }
FOR -> for ( ASSIGNMENT_EXPR ; ASSIGNMENT_EXPR ; ASSIGNMENT_EXPR ) { STATEMENT }
IF -> if ( ASSIGNMENT_EXPR ) { STATEMENT } ELSE
ELSE -> else { STATEMENT } | E
RETURN -> return ASSIGNMENT_EXPR

ASSIGNMENT -> id = ASSIGNMENT_EXPR
ASSIGNMENT_EXPR -> LOGICAL_EXPR

LOGICAL_EXPR ->  RELATIONAL_EXPR        LOGICAL_EXPR’
LOGICAL_EXPR’ -> && RELATIONAL_EXPR LOGICAL_EXPR’ | OR RELATIONAL_EXPR LOGICAL_EXPR’ | E

RELATIONAL_EXPR ->   ADDITIVE_EXPR  RELATIONAL_EXPR’
RELATIONAL_EXPR’ ->  >=  ADDITIVE_EXPR RELATIONAL_EXPR’ |  ==  ADDITIVE_EXPR RELATIONAL_EXPR’ |  !=  ADDITIVE_EXPR RELATIONAL_EXPR’ |  <=  ADDITIVE_EXPR RELATIONAL_EXPR’ |  >  ADDITIVE_EXPR RELATIONAL_EXPR’ |  <  ADDITIVE_EXPR RELATIONAL_EXPR’ | E

ADDITIVE_EXPR -> MULTIPLICATIVE_EXPR    ADDITIVE_EXPR’
ADDITIVE_EXPR’ -> + MULTIPLICATIVE_EXPR   ADDITIVE_EXPR’ | - MULTIPLICATIVE_EXPR   ADDITIVE_EXPR’ | E

MULTIPLICATIVE_EXPR -> UNARY_EXPR   MULTIPLICATIVE_EXPR’
MULTIPLICATIVE_EXPR’ -> * UNARY_EXPR    MULTIPLICATIVE_EXPR’ |  / UNARY_EXPR    MULTIPLICATIVE_EXPR’ | E

UNARY_EXPR -> PRIMARY_EXPR | FUNCTION_CALL

PRIMARY_EXPR -> id | value | ( ASSIGNMENT_EXPR )

DECLARE_FUNCTION ->  function id ( FUNCTION_PARAMS ) { STATEMENT }
FUNCTION_PARAMS ->  DECLARE_PARAMS | E
DECLARE_PARAMS ->  int id DECLARE_PARAMS' | float id DECLARE_PARAMS' | boolean id DECLARE_PARAMS' | string int id DECLARE_PARAMS'
DECLARE_PARAMS' ->  , DECLARE_PARAMS | E

FUNCTION_CALL -> _ id ( PARAM_LIST )
PARAM_LIST -> ASSIGNMENT_EXPR PARAM_LIST'
PARAM_LIST' -> , ASSIGNMENT_EXPR PARAM_LIST' | E