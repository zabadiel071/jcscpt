SCRIPT -> DECLARE_FUNCTION SCRIPT' | STATEMENT_LIST SCRIPT' | E
SCRIPT' -> DECLARE_FUNCTION SCRIPT' | STATEMENT_LIST SCRIPT' | E

STATEMENT_LIST ->  STATEMENT STATEMENT_LIST'
STATEMENT_LIST' -> STATEMENT STATEMENT_LIST' | E

STATEMENT -> ASSIGNMENT | DECLARATION | ++ id | -- id | LOOP | IF | RETURN | FOR 

ASSIGNMENT -> id assignment_op ASSIGNMENT_EXPR

DECLARATION -> type ASSIGNMENT DECLARATION'
DECLARATION' -> , ASSIGNMENT    DECLARATION' | E

LOOP -> while ( ASSIGNMENT_EXPR )  { STATEMENT_LIST }
FOR -> for ( ASSIGNMENT_EXPR ; ASSIGNMENT_EXPR ; ASSIGNMENT_EXPR ) { STATEMENT_LIST }
IF -> if ( ASSIGNMENT_EXPR ) { STATEMENT_LIST } ELSE
ELSE -> else { STATEMENT_LIST } | E
RETURN -> return ASSIGNMENT_EXPR

ASSIGNMENT_EXPR -> LOGICAL_EXPR

LOGICAL_EXPR ->  RELATIONAL_EXPR        LOGICAL_EXPR’
LOGICAL_EXPR’ -> op_logical RELATIONAL_EXPR LOGICAL_EXPR’ | E

RELATIONAL_EXPR ->   ADDITIVE_EXPR  RELATIONAL_EXPR’
RELATIONAL_EXPR’ ->  op_relational  RELATIONAL_EXPR’ | E

ADDITIVE_EXPR -> MULTIPLICATIVE_EXPR    ADDITIVE_EXPR’  
ADDITIVE_EXPR’ -> op_additive MULTIPLICATIVE_EXPR   ADDITIVE_EXPR’ | E

MULTIPLICATIVE_EXPR -> PRIMARY_EXPR   MULTIPLICATIVE_EXPR’
MULTIPLICATIVE_EXPR’ -> op_factor PRIMARY_EXPR    MULTIPLICATIVE_EXPR’ | E

PRIMARY_EXPR -> id | value | ( ASSIGNMENT_EXPR )

DECLARE_FUNCTION ->  function id ( FUNCTION_PARAMS ) { STATEMENT_LIST }
FUNCTION_PARAMS ->  DECLARE_PARAMS |  E
DECLARE_PARAMS ->  tipo id DECLARE_PARAMS'
DECLARE_PARAMS' ->  , DECLARE_PARAMS |  E